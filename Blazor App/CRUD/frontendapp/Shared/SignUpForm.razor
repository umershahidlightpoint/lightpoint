@page "/create"
@inject IModalService ModalService
@inject HttpClient httpClient
@inject IJSRuntime JsRuntime
 
<div>

    <div class="form-group row">
        <div class="col-sm-3 allign-right mt-08">
            <label for="data">Account</label>
        </div>
        <div class="col-sm-7">

            <BlazoredTypeahead SearchMethod="@GetAccounts"
                   @bind-Value="@selecteAccount"
                    Debounce="500"
                    Placeholder="Search...">
                <SelectedTemplate Context="Datum">
                    @Datum.Name
                </SelectedTemplate>
                <ResultTemplate Context="Datum">
                    @Datum.Name @Datum.Name
                </ResultTemplate>
            </BlazoredTypeahead>

             

        </div>
    </div>

    <div class="form-group row">
            <div class="col-sm-3 allign-right mt-08">
                <label for="user">User</label>
            </div>
            <div class="col-sm-7">
                <BlazoredTypeahead SearchMethod="@getCustomers"
                                   @bind-Value="@selectedCustomer"
                                   Debounce="500"
                                   Placeholder="Search...">
                    <SelectedTemplate Context="Cust">
                        @Cust.Name
                    </SelectedTemplate>
                    <ResultTemplate Context="Cust">
                        @Cust.Name
                        @Cust.Email
                    </ResultTemplate>
                </BlazoredTypeahead>

                
            </div>
        </div>

    <div class="form-group row">
        <div class="col-sm-3 allign-right mt-08">
            <label for="value">Value</label>
        </div>
        <div class="col-sm-3">
            <input type="number" @bind="@value_index" class="form-control" id="value_index" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-3 allign-right mt-08">
            <label for="first-name">Effective Date</label>
        </div>
        <div class="col-sm-5"> 
            <input type="date" bind="@_effectiveDate" class="form-control"   />
        </div>
    </div>

</div>
<div class="modal-footer allign-right">
    <button onclick="@Cancel" class="btn btn-secondary">Cancel</button>
    <button onclick="@createLedger" class="btn btn-primary">Submit</button>
</div>


@functions {
    private long SelectedFoundID = 0;
    long SelectLedgerID = 0;

    private double value_index { get; set; } = 0;
    DateTime _effectiveDate;

    [CascadingParameter] ModalParameters Parameters { get; set; }

    string baseUrl = $"http://175.10.20.130:3000/v1/ledgers";


    private Datum selecteAccount;
    private Cust selectedCustomer;

    private FormExample FormModel = new FormExample();

    protected override void OnInit() {
        SelectedFoundID = Parameters.Get<long>("SelectedFoundID");
        try
        {
            SelectLedgerID = Parameters.Get<long>("SelectLedgerID");

        }
        catch(Exception ex)
        {
            SelectLedgerID = 0;
        }

        
        selectedCustomer = new Cust();
        selecteAccount = new Datum();
        // Console.WriteLine( "idddd" +  Parameters.Get<long>("CustomerID"));
        try
        {
            if (SelectLedgerID > 0)
            {
                selectedCustomer.Id = Parameters.Get<long>("CustomerID");
                selectedCustomer.Name = Parameters.Get<string>("CustomerName");
                selecteAccount.Id = Parameters.Get<long>("AccountID");

                selecteAccount.Name = Parameters.Get<string>("AccountName");
                object stVindex = Parameters.Get<object>("value_index");
                value_index = double.Parse(stVindex.ToString());
                string d = "01/01/2019";
                _effectiveDate = DateTime.Parse(d); //  Parameters.Get<DateTime>("EffectiveDate");
                this.StateHasChanged();

            }

        }
        catch(Exception  ex)
        {
            Console.WriteLine(ex.Message.ToString());

        }
        // selectedCustomer.Name = Parameters.Get<string>("CustomerName");


        //    getAccountByID = Parameters.Get<long>("getAccountByID");

    }

    List<Datum> lDatum = new List<Datum>();
    List<Cust> lCust = new List<Cust>();

    private async Task<List<Datum>> GetAccounts(string searchText)
    {
        string stResult = "";
        stResult = await httpClient.GetStringAsync($"http://175.10.20.130:3000/v1/accounts");
        var temperaturses = TempAccount.FromJson(stResult);
        lDatum= await Task.FromResult(temperaturses.Data.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());

        Console.WriteLine(lDatum.FirstOrDefault().Name);
        return lDatum;

    }

    private async Task<List<Cust>> getCustomers(string searchText)
    {
        string stResult = "";
        stResult = await httpClient.GetStringAsync($"http://175.10.20.130:3000/v1/customers");
        var customers = Customers.FromJson(stResult);
        lCust= await Task.FromResult(customers.Data.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());

        return lCust;

    }




    protected async Task createLedger(){


        LedgerInput ledgers = new LedgerInput()
        {
            id = SelectLedgerID,
            value = value_index,
            customer_id = selectedCustomer.Id,
            account_id = selecteAccount.Id,
            fund_id = SelectedFoundID,
            effectiveDate = "2019-12-05" //"2019-01-01"// _effectiveDate.ToString("yyyy-MM-dd")  //"2019-12-06"

        };


        this.StateHasChanged();
        Console.WriteLine("SelectLedgerID="+SelectLedgerID);
        Console.WriteLine("value_index="+value_index);
        Console.WriteLine("selectedCustomer.Id="+selectedCustomer.Id);
        Console.WriteLine("selecteAccount.Id="+selecteAccount.Id);
        Console.WriteLine("SelectedFoundID="+SelectedFoundID);
        Console.WriteLine(_effectiveDate.ToString("yyyy-MM-dd") );
        LedgerInput rr;
        if (SelectLedgerID > 0)
        {
              rr = await httpClient.PutJsonAsync<LedgerInput>("http://175.10.20.130:3000/v1/ledgers/" + SelectLedgerID, ledgers);
        }
        else
        {
               rr = await httpClient.PostJsonAsync<LedgerInput>("http://175.10.20.130:3000/v1/ledgers/", ledgers);
        }
        //  LedgerInput rr=   await httpClient.PostJsonAsync< LedgerInput >(  baseUrl, ledgers);
        // var response = new HttpClient().PostAsJsonAsync<bool>(baseUrl, ledgers).Result;

        ModalService.Close(ModalResult.Ok(rr)  );

    }


    void Done()
    {

    }

    void Cancel()
    {

        ModalService.Close(ModalResult.Cancel());
    }

}
@code {

}